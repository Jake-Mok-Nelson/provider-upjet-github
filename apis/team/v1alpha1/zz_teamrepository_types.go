/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TeamRepositoryObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TeamRepositoryParameters struct {

	// The permissions of team members regarding the repository.
	// Must be one of pull, triage, push, maintain, admin or the name of an existing custom repository role within the organisation. Defaults to pull.
	// +kubebuilder:validation:Optional
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// The repository to add to the team.
	// +crossplane:generate:reference:type=github.com/coopnorge/provider-github/apis/repo/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

// TeamRepositorySpec defines the desired state of TeamRepository
type TeamRepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamRepositoryParameters `json:"forProvider"`
}

// TeamRepositoryStatus defines the observed state of TeamRepository.
type TeamRepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TeamRepository is the Schema for the TeamRepositorys API. Manages the associations between teams and repositories.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type TeamRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TeamRepositorySpec   `json:"spec"`
	Status            TeamRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamRepositoryList contains a list of TeamRepositorys
type TeamRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TeamRepository `json:"items"`
}

// Repository type metadata.
var (
	TeamRepository_Kind             = "TeamRepository"
	TeamRepository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TeamRepository_Kind}.String()
	TeamRepository_KindAPIVersion   = TeamRepository_Kind + "." + CRDGroupVersion.String()
	TeamRepository_GroupVersionKind = CRDGroupVersion.WithKind(TeamRepository_Kind)
)

func init() {
	SchemeBuilder.Register(&TeamRepository{}, &TeamRepositoryList{})
}
