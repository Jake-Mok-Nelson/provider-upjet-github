/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryCollaboratorInitParameters struct {

	// The permission of the outside collaborator for the repository.
	// Must be one of pull, push, maintain, triage or admin or the name of an existing custom repository role within the organization for organization-owned repositories.
	// Must be push for personal repositories. Defaults to push.
	// The permission of the outside collaborator for the repository. Must be one of 'pull', 'push', 'maintain', 'triage' or 'admin' or the name of an existing custom repository role within the organization for organization-owned repositories. Must be 'push' for personal repositories. Defaults to 'push'.
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// Suppress plan diffs for triage and maintain.  Defaults to false.
	// Suppress plan diffs for triage and maintain. Defaults to 'false'.
	PermissionDiffSuppression *bool `json:"permissionDiffSuppression,omitempty" tf:"permission_diff_suppression,omitempty"`

	// The GitHub repository
	// The GitHub repository
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/repo/v1alpha1.Repository
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`

	// The user to add to the repository as a collaborator.
	// The user to add to the repository as a collaborator.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type RepositoryCollaboratorObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the invitation to be used in github_user_invitation_accepter
	// ID of the invitation to be used in 'github_user_invitation_accepter'
	InvitationID *string `json:"invitationId,omitempty" tf:"invitation_id,omitempty"`

	// The permission of the outside collaborator for the repository.
	// Must be one of pull, push, maintain, triage or admin or the name of an existing custom repository role within the organization for organization-owned repositories.
	// Must be push for personal repositories. Defaults to push.
	// The permission of the outside collaborator for the repository. Must be one of 'pull', 'push', 'maintain', 'triage' or 'admin' or the name of an existing custom repository role within the organization for organization-owned repositories. Must be 'push' for personal repositories. Defaults to 'push'.
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// Suppress plan diffs for triage and maintain.  Defaults to false.
	// Suppress plan diffs for triage and maintain. Defaults to 'false'.
	PermissionDiffSuppression *bool `json:"permissionDiffSuppression,omitempty" tf:"permission_diff_suppression,omitempty"`

	// The GitHub repository
	// The GitHub repository
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// The user to add to the repository as a collaborator.
	// The user to add to the repository as a collaborator.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type RepositoryCollaboratorParameters struct {

	// The permission of the outside collaborator for the repository.
	// Must be one of pull, push, maintain, triage or admin or the name of an existing custom repository role within the organization for organization-owned repositories.
	// Must be push for personal repositories. Defaults to push.
	// The permission of the outside collaborator for the repository. Must be one of 'pull', 'push', 'maintain', 'triage' or 'admin' or the name of an existing custom repository role within the organization for organization-owned repositories. Must be 'push' for personal repositories. Defaults to 'push'.
	// +kubebuilder:validation:Optional
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// Suppress plan diffs for triage and maintain.  Defaults to false.
	// Suppress plan diffs for triage and maintain. Defaults to 'false'.
	// +kubebuilder:validation:Optional
	PermissionDiffSuppression *bool `json:"permissionDiffSuppression,omitempty" tf:"permission_diff_suppression,omitempty"`

	// The GitHub repository
	// The GitHub repository
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/repo/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`

	// The user to add to the repository as a collaborator.
	// The user to add to the repository as a collaborator.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// RepositoryCollaboratorSpec defines the desired state of RepositoryCollaborator
type RepositoryCollaboratorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryCollaboratorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryCollaboratorInitParameters `json:"initProvider,omitempty"`
}

// RepositoryCollaboratorStatus defines the observed state of RepositoryCollaborator.
type RepositoryCollaboratorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryCollaboratorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RepositoryCollaborator is the Schema for the RepositoryCollaborators API. Provides a GitHub repository collaborator resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type RepositoryCollaborator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   RepositoryCollaboratorSpec   `json:"spec"`
	Status RepositoryCollaboratorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryCollaboratorList contains a list of RepositoryCollaborators
type RepositoryCollaboratorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryCollaborator `json:"items"`
}

// Repository type metadata.
var (
	RepositoryCollaborator_Kind             = "RepositoryCollaborator"
	RepositoryCollaborator_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryCollaborator_Kind}.String()
	RepositoryCollaborator_KindAPIVersion   = RepositoryCollaborator_Kind + "." + CRDGroupVersion.String()
	RepositoryCollaborator_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryCollaborator_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryCollaborator{}, &RepositoryCollaboratorList{})
}
