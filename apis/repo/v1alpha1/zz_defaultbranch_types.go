/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DefaultBranchObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DefaultBranchParameters struct {

	// The branch (e.g. main)
	// +crossplane:generate:reference:type=github.com/coopnorge/provider-github/apis/repo/v1alpha1.Branch
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Reference to a Branch in repo to populate branch.
	// +kubebuilder:validation:Optional
	BranchRef *v1.Reference `json:"branchRef,omitempty" tf:"-"`

	// Selector for a Branch in repo to populate branch.
	// +kubebuilder:validation:Optional
	BranchSelector *v1.Selector `json:"branchSelector,omitempty" tf:"-"`
}

// DefaultBranchSpec defines the desired state of DefaultBranch
type DefaultBranchSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DefaultBranchParameters `json:"forProvider"`
}

// DefaultBranchStatus defines the observed state of DefaultBranch.
type DefaultBranchStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DefaultBranchObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultBranch is the Schema for the DefaultBranchs API. Provides a GitHub branch default for a given repository.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type DefaultBranch struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DefaultBranchSpec   `json:"spec"`
	Status            DefaultBranchStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultBranchList contains a list of DefaultBranchs
type DefaultBranchList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DefaultBranch `json:"items"`
}

// Repository type metadata.
var (
	DefaultBranch_Kind             = "DefaultBranch"
	DefaultBranch_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DefaultBranch_Kind}.String()
	DefaultBranch_KindAPIVersion   = DefaultBranch_Kind + "." + CRDGroupVersion.String()
	DefaultBranch_GroupVersionKind = CRDGroupVersion.WithKind(DefaultBranch_Kind)
)

func init() {
	SchemeBuilder.Register(&DefaultBranch{}, &DefaultBranchList{})
}
