/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryFileObservation struct {

	// The SHA of the commit that modified the file.
	// The SHA of the commit that modified the file
	CommitSha *string `json:"commitSha,omitempty" tf:"commit_sha,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The SHA blob of the file.
	// The blob SHA of the file
	Sha *string `json:"sha,omitempty" tf:"sha,omitempty"`
}

type RepositoryFileParameters struct {

	// Git branch (defaults to main).
	// The branch must already exist, it will not be created if it does not already exist.
	// The branch name, defaults to "main"
	// +crossplane:generate:reference:type=Branch
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Reference to a Branch to populate branch.
	// +kubebuilder:validation:Optional
	BranchRef *v1.Reference `json:"branchRef,omitempty" tf:"-"`

	// Selector for a Branch to populate branch.
	// +kubebuilder:validation:Optional
	BranchSelector *v1.Selector `json:"branchSelector,omitempty" tf:"-"`

	// Committer author name to use. NOTE: GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This maybe useful when a branch protection rule requires signed commits.
	// The commit author name, defaults to the authenticated user's name. GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App.
	// +kubebuilder:validation:Optional
	CommitAuthor *string `json:"commitAuthor,omitempty" tf:"commit_author,omitempty"`

	// Committer email address to use. NOTE: GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This may be useful when a branch protection rule requires signed commits.
	// The commit author email address, defaults to the authenticated user's email address. GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App.
	// +kubebuilder:validation:Optional
	CommitEmail *string `json:"commitEmail,omitempty" tf:"commit_email,omitempty"`

	// Commit message when adding or updating the managed file.
	// The commit message when creating, updating or deleting the file
	// +kubebuilder:validation:Optional
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`

	// The file content.
	// The file's content
	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// The path of the file to manage.
	// The file path to manage
	// +kubebuilder:validation:Required
	File *string `json:"file" tf:"file,omitempty"`

	// Enable overwriting existing files
	// Enable overwriting existing files, defaults to "false"
	// +kubebuilder:validation:Optional
	OverwriteOnCreate *bool `json:"overwriteOnCreate,omitempty" tf:"overwrite_on_create,omitempty"`

	// The repository to create the file in.
	// The repository name
	// +crossplane:generate:reference:type=Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

// RepositoryFileSpec defines the desired state of RepositoryFile
type RepositoryFileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryFileParameters `json:"forProvider"`
}

// RepositoryFileStatus defines the observed state of RepositoryFile.
type RepositoryFileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryFileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryFile is the Schema for the RepositoryFiles API. Creates and manages files within a GitHub repository
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type RepositoryFile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RepositoryFileSpec   `json:"spec"`
	Status            RepositoryFileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryFileList contains a list of RepositoryFiles
type RepositoryFileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryFile `json:"items"`
}

// Repository type metadata.
var (
	RepositoryFile_Kind             = "RepositoryFile"
	RepositoryFile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryFile_Kind}.String()
	RepositoryFile_KindAPIVersion   = RepositoryFile_Kind + "." + CRDGroupVersion.String()
	RepositoryFile_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryFile_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryFile{}, &RepositoryFileList{})
}
